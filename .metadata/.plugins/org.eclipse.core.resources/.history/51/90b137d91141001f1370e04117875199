package com.pokemon.solgario.week1introduction.introductionToSpringBoot;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class DBService implements DB{
	
//	@Autowired
//	DevDB db;
	/*
	 * After implementing DB on the class DBService we are changing it DB interface
	 */
	
	@Autowired
	private DB db;
	//This DB will try to inject both the dependency Dev Db and Prod DB at a time.
	//This is very ambigius. required a single bean but two were found.
	//one of the bean can be marked as primary.
	
	//constructor injection
	public DBService(DB db) {
		this.db = db;
	}
	
//	@Autowired
//	ProdDB db;
	
	public String getData() {
		return db.getData();
	}
	
	
}

/*
====================================Dependency Injection====================================

Alice wants to bake some cake
Alice has a Bakery. but she has no ingredients for chocolate cake
Ingredients like frosting, syrup has to be taken from market. 
But she is doing that part it will consume here lot of time.

Alice hire Bob to get the ingredients according to her.
She has delegated the work of ingredient to Bob.

Similarly: if our code is dependent on some other code and you dont want to manage it.
We employ dempendency injection to do this.

1. LifeCycle of Bean
2. Loosely Couple as well:
	like. Alice is baking chocolate cake she wants to bake the strawberry cake.
	For this obviously she wont build a separate bakery only ingredients will be different.
	if she does that building separate bakery that will be tightly coupled system.
	
	Similarly: Multiple type of configuration for different envs. like PRD, Testing and Staging
	With the single piece of code we have different application on diff. env.
	

Dependency Injection in the context of the Spring Framework is a design pattern and 
technique used to achieve loose coupling  between components in a software application.
In a DI scenario, instead of a component creating its dependencies directly,
the dependencies are injected into component from an external source.
Typically managed by a framework like Spring.

eg. Development Prd:=> DB using DI


===============================Environment Variables===========================

We can remove the tight coupling part of application.properties 
to loose couple by providing the Environment variables.

Benefits of Dependency Injection:

Loose Coupling: components are decoupled from their dependencies, making them easier to maintain and test.

Flexible Configuration: Dependencies can be configured externally,
allowing for easier customization and swapping of components.

Improved Testability: Components can be easily mocked or replaced during testing,
allowing for more through and isolated unit tests.


How to inject Dependencies

:=> Constructor Injection
Dependencies are provided through a class constructor

:=> Field Injection
Dependencies are provided directly into the fields of a class using @Autowired.

*/